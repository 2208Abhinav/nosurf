package nosurf

import (
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"io"
)

const (
	tokenLength = 32
)

// A token is generated by returning rawTokenLength bytes
// from crypto/rand
func generateToken() []byte {
	bytes := make([]byte, tokenLength)
	_, _ = io.ReadFull(rand.Reader, bytes)

	// I'm not sure how to handle the error from the above call.
	// It shouldn't EVER really happen,
	// as we check for the availablity of crypto/random
	// in the init() function
	// and both /dev/urandom and CryptGenRandom()
	// should be inexhaustible.

	return bytes
}

func b64encode(data []byte) string {
	return base64.StdEncoding.EncodeToString(data)
}

func b64decode(data string) []byte {
	decoded, err := base64.StdEncoding.DecodeString(data)
	if err != nil {
		return nil
	}
	return decoded
}

func init() {
	// Check that cryptographically secure PRNG is available
	// In case it's not, panic.
	buf := make([]byte, 1)
	_, err := io.ReadFull(rand.Reader, buf)

	if err != nil {
		panic(fmt.Sprintf("crypto/rand is unavailable: Read() failed with %#v", err))
	}
}
